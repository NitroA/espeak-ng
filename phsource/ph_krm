//======================================
// Tatar (Romania, Dobrudja Region)
//======================================

// Vowels

phoneme a
  vwl starttype #a endtype #a
  length 180
  FMT(vowel/a)
endphoneme

phoneme e
  vwl starttype #e endtype #e
  length 180
  FMT(vowel/e_mid2)
endphoneme

phoneme @
  vwl starttype #@ endtype #@
  ipa ɯ
  length 180
  FMT(vowel/u#_7)
endphoneme

phoneme i
  vwl starttype #i endtype #i
  length 170
  IfNextVowelAppend(;)
  FMT(vowel/i)
endphoneme

phoneme o
  vwl starttype #o endtype #o
  length 170
  FMT(vowel/o-_4)
endphoneme

phoneme O
  vwl starttype #@ endtype #@
  length 180
  FMT(vowel/y#)
endphoneme
  
phoneme u
  vwl starttype #u endtype #u
  length 160
  FMT(vowel/u_2)
endphoneme

phoneme U
  vwl starttype #i endtype #i
  length 180
  FMT(vowel/y)
endphoneme

phoneme aI
  vwl starttype #a endtype #i
  length 250
  FMT(vdiph/ai)
endphoneme

// Consonants

phoneme k
  vls vel stp
  lengthmod 2
  voicingswitch g
  Vowelin f1=0  f2=2300 200 400  f3=-100 80
  Vowelout f1=0 f2=2300 300 400  f3=-100 80  rms=20

  IF nextPh(isPause2) THEN
    WAV(ustop/k_)
  ELIF nextPh(isRhotic) THEN
    WAV(ustop/kr)
  ELIF nextPh(#i) OR nextPh(;) THEN
    WAV(ustop/ki)
  ELIF nextPh(l) THEN
    WAV(ustop/kl)
  ENDIF
  WAV(ustop/k_unasp, 70)
endphoneme

phoneme Q
  vcd vel frc
  voicingswitch x
  lengthmod 6
  Vowelin f1=2  f2=2300 200 400  f3=-100 80
  Vowelout f1=2  f2=2300 250 300  f3=-300 80 brk

  IF KlattSynth THEN
    IF nextPh(isPause2) THEN
      FMT(klatt/qqh_) addWav(vocw/Q_)
    ENDIF
    FMT(klatt/qqh) addWav(vocw/Q)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(voc/Q_) addWav(vocw/Q_)
  ENDIF
  FMT(voc/Q) addWav(vocw/Q)
endphoneme

phoneme TS
  vls pla afr sib
  ipa tʃ
  WAV(ustop/tsh)
endphoneme

phoneme DZ
  vcd pla afr sib
  ipa dʒ
  FMT(dzh/dzh) addWav(x/dzh)
endphoneme

phoneme t        // dental variant of /t/
  vls dnt stp
  lengthmod 2
  voicingswitch d
  Vowelin f1=0  f2=1600 -300 300  f3=-100 80
  Vowelout f1=0 f2=1600 -300 250  f3=-100 80  rms=20
  IF nextPh(isPause2) THEN
    WAV(ustop/t_dnt, 30)
  ENDIF
  WAV(ustop/t_dnt2, 60)
endphoneme


phoneme d       // dental variant of /d/
  vcd dnt stp
  lengthmod 5
  voicingswitch t
  Vowelin f1=2  f2=1500 -300 300  f3=-150 80
  Vowelout f1=2 f2=1500 -300 300  f3=-150 80

  IF PreVoicing THEN
    FMT(d/xd)
  ENDIF

  IF nextPh(isPause2) THEN
    FMT(d/d_) addWav(x/d_)
  ELIF nextPh(isRhotic) THEN
    FMT(d/dr) addWav(x/d_dnt, 110)
  ENDIF

  FMT(d/d) addWav(x/d_dnt, 110)
endphoneme

phoneme p
  vls blb stp
  lengthmod 2
  voicingswitch b
  Vowelin  f1=0  f2=1000 -50 -100  f3=-200 80
  Vowelout f1=0  f2=1000 -500 -350  f3=-300 80 rms=30
  IF nextPh(isPause2) THEN
    WAV(ustop/p_unasp_, 80)
  ELIF nextPh(isRhotic) THEN
    WAV(ustop/pr)
  ELIF nextPh(l) THEN
    WAV(ustop/pl)
  ENDIF
  WAV(ustop/p_unasp)
endphoneme

phoneme R
  liquid trl
  lengthmod 6
  ipa r
  IF nextPhW(R2) THEN
    ipa NULL
  ENDIF
  Vowelin  f1=0  f2=1600 -300 300  f3=-200 80
  Vowelout f1=2  f2=1600 -300 300  f3=-200 80 brk
  FMT(r3/r_trill2) addWav(r3/r_trill2.wav, 65)
endphoneme

phoneme w2
  liquid
  lengthmod 7

  CALL base1/w
  IF nextPh(isVowel) THEN
    FMT(w/w2)   // longer [w]
  ENDIF
endphoneme
