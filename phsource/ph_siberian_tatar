//=================================
// Siberian Tatar
//=================================

phoneme a
  vwl starttype #a endtype #a
  length 180
  FMT(vowel/a)
endphoneme

phoneme e
  vwl starttype #e endtype #e
  length 170
  FMT(vowel/e)
endphoneme

phoneme i
  vwl starttype #i endtype #i
  length 170
  IfNextVowelAppend(;)
  FMT(vowel/i)
endphoneme

phoneme o
  vwl starttype #@ endtype #@
  length 140
  IF thisPh(isWordEnd) THEN
    length 170
  ENDIF
  FMT(vowel/8)
endphoneme

phoneme u
  vwl starttype #u endtype #u
  length 180
  FMT(vowel/uu_2)
endphoneme

phoneme y
  vwl starttype #i endtype #i
  length 180
  FMT(vowel/y)
endphoneme

phoneme @
  ipa É¯
  vwl starttype #@ endtype #@
  length 180
  FMT(vowel/u#_7)
endphoneme

phoneme &
  vwl starttype #a endtype #a
  length 200
  FMT(vowel/ee_6)
endphoneme


phoneme t        // dental variant of /t/
  vls dnt stp
  lengthmod 2
  voicingswitch d
  Vowelin f1=0  f2=1600 -300 300  f3=-100 80
  Vowelout f1=0 f2=1600 -300 250  f3=-100 80  rms=20
  IF nextPh(isPause2) THEN
    WAV(ustop/t_dnt, 30)
  ENDIF
  WAV(ustop/t_dnt2, 60)
endphoneme

phoneme L   // velar L
  liquid
  lengthmod 7

  IF nextPh(isNotVowel) THEN
    ChangePhoneme(L/)     // use 'dark' [l] after a vowel
  ENDIF

  VowelEnding(ll/xll, -40)

  IF prevPh(isPause) THEN
     FMT(ll/_ll)
  ENDIF

  FMT(ll/ll)
endphoneme

phoneme N // si**ng** 
  vcd vel nas
  Vowelout f1=3 f2=2300 300 400  f3=-200 80  len=40 rms=20 brk
  lengthmod 8            // longer than 'n'

  IF KlattSynth THEN
    Vowelin f1=0 f2=2100 50 300 f3=0 80
    IF nextPh(isPause2) THEN
      FMT(klatt/nn_)
    ENDIF
    FMT(klatt/nn)
  ENDIF

  NextVowelStarts
    VowelStart(nn/nn@)
    VowelStart(nn/nna)
    VowelStart(nn/nne)
    VowelStart(nn/nni)
    VowelStart(nn/nno)
    VowelStart(nn/nnu)
  EndSwitch

  IF prevPh(#i) THEN
    VowelEnding(nn/inn, -40)
  ENDIF

  IF prevPh(isNotVowel) AND nextPhW(isLiquid) THEN
    FMT(nn/nnj)
  ELIF prevPh(isPause) THEN
    FMT(nn/_nn)
  ELIF nextPh(isNotVowel) THEN
    FMT(nn/nn_)
  ENDIF
endphoneme





