name: fuzzing

on:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * 1"

jobs:
  fuzzing:

    runs-on: ubuntu-latest
    name: Fuzz synth_espeak on ${{ matrix.arch }} for ${{ matrix.lang }}
    strategy:
      fail-fast: false
      matrix:
        arch: [x86-32, x86-64]
        lang: [af, am, an, ar, as, az, ba, be, bg, bn, bpy, bs, ca, chr, cmn, cs, cv, cy, da, de, el, en, eo, es, et, eu, fa, fi, fr, ga, gd, gn, grc, gu, hak, haw, he, hi, hr, ht, hu, hy, ia, id, io, is, it, ja, jbo, ka, kk, kl, kn, ko, kok, ku, ky, la, lb, lfn, lt, lv, mi, mk, ml, mr, ms, mt, my, nci, ne, nl, no, nog, om, or, pa, pap, piqd, pl, pt, py, qdb, qu, quc, qya, ro, ru, sd, shn, si, sjn, sk, sl, smj, sq, sr, sv, sw, ta, te, th, tk, tn, tr, tt, ug, uk, ur, uz, vi, yue]
        include:
          - arch: x86-32
            archdeps: "gcc-multilib g++-multilib libpcaudio-dev:i386 libsonic-dev:i386 libc6-dbg:i386"
            archconfigflags: "-m32"

          - arch: x86-64
            archdeps: ""
            archconfigflags: ''
    steps:
    - uses: actions/checkout@v2
    - name: enable 32bit architecture
      run: sudo dpkg --add-architecture i386
      if: matrix.arch == 'x86-32'
    - name: dependencies
      run: sudo apt-get update && sudo apt-get install libpcaudio-dev libsonic-dev ronn kramdown clang llvm ${{ matrix.archdeps }}
    - name: autoconf
      run: ./autogen.sh ; chmod -x INSTALL m4/*.m4
    - name: configure
      run: CC=clang CXX=clang++
           CFLAGS="${{ matrix.archconfigflags }} -fsanitize=address,undefined -fstack-protector-strong -g -Og -fno-omit-frame-pointer"
           CXXFLAGS="${{ matrix.archconfigflags }} -fsanitize=address,undefined -fstack-protector-strong -g -Og -fno-omit-frame-pointer"
           LDFLAGS="-fsanitize=address,undefined -lubsan"
           ./configure --with-libfuzzer
    - name: Store the fuzzer config
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: config-${{ matrix.arch }}-${{ matrix.lang }}.log
        path: config.log
    - name: make
      run: make -j
    - name: Fuzz function synth_espeak()
      run:   mkdir tests/fuzzing/CORPUS_DIR ; FUZZ_VOICE=${{ matrix.lang }} tests/fuzzing/synth_fuzzer.test -seed=1  -runs=10000 -max_len=4096 tests/fuzzing/CORPUS_DIR
    - name: Store the crash POC
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: crash-${{ matrix.arch }}-${{ matrix.lang }}.1
        path: crash-*
    - name: Fuzz function synth_espeak() with language-specific input
      run:   cp dictsource/${{ matrix.lang }}_* tests/fuzzing/CORPUS_DIR/ ; FUZZ_VOICE=${{ matrix.lang }} tests/fuzzing/synth_fuzzer.test -seed=1  -runs=10000 -max_len=4096 tests/fuzzing/CORPUS_DIR
    - name: Store the crash POC
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: crash-${{ matrix.arch }}-${{ matrix.lang }}.2
        path: crash-*
